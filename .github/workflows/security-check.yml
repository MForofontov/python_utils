name: security-check

on:
  workflow_dispatch:
    inputs:
      severity:
        description: "Minimum severity to report (low|medium|high)"
        required: false
        default: "medium"
        type: choice
        options: [low, medium, high]
      confidence:
        description: "Minimum confidence to report (low|medium|high)"
        required: false
        default: "medium"
        type: choice
        options: [low, medium, high]
      use_baseline:
        description: "Path to Bandit baseline file (optional)"
        required: false
        default: ""
        type: string
      upload_sarif:
        description: "Upload SARIF to GitHub code scanning"
        required: false
        default: false
        type: boolean
      run_pip_audit:
        description: "Also run pip-audit on dependencies"
        required: false
        default: false
        type: boolean
      fail_on_findings:
        description: "Fail job if findings exist (Bandit and/or pip-audit)"
        required: false
        default: true
        type: boolean

jobs:
  bandit:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11"
      B_ANDIT_DIRS: "asyncio_functions compression_functions data_types datetime_functions decorators env_config_functions file_functions http_functions iterable_functions json_functions linux_functions logger_functions logging_debugging mathematical_functions multiprocessing_functions print_functions security_functions ssh_functions strings_utility"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          if [ "${{ inputs.upload_sarif }}" = "true" ]; then pip install bandit>=1.7.6; fi
          if [ "${{ inputs.run_pip_audit }}" = "true" ]; then pip install pip-audit; fi
          sudo apt-get update -y && sudo apt-get install -y jq

      - name: Determine file set (tracked .py files within your target dirs)
        id: files
        shell: bash
        run: |
          # Use tracked Python files only to avoid vendored/venv noise
          mapfile -t PYFILES < <(git ls-files -- "*.py")
          # Filter to the provided dirs and exclude common junk
          FILTERED=()
          for f in "${PYFILES[@]}"; do
            case "$f" in
              venv/*|.venv/*|.mypy_cache/*|.ruff_cache/*|dist/*|build/*) continue ;;
            esac
            for d in $B_ANDIT_DIRS; do
              if [[ "$f" == $d/* ]]; then FILTERED+=("$f"); break; fi
            done
          done
          if [ ${#FILTERED[@]} -eq 0 ]; then
            echo "No Python files matched target directories."
            echo "files=" >> $GITHUB_OUTPUT
          else
            printf '%s\n' "${FILTERED[@]}" > bandit-filelist.txt
            echo "files=bandit-filelist.txt" >> $GITHUB_OUTPUT
          fi

      - name: Run Bandit (JSON)
        id: bandit_json
        shell: bash
        run: |
          set +e
          if [ -z "${{ steps.files.outputs.files }}" ]; then
            echo "No files to scan."
            echo "exit_code=0" >> $GITHUB_OUTPUT
            printf '{"results":[],"metrics":{"_totals":{"CONFIDENCE.HIGH":0,"CONFIDENCE.MEDIUM":0,"CONFIDENCE.LOW":0,"SEVERITY.HIGH":0,"SEVERITY.MEDIUM":0,"SEVERITY.LOW":0}}}\n' > bandit.json
            exit 0
          fi

          BASELINE_ARG=""
          if [ -n "${{ inputs.use_baseline }}" ]; then
            [ -f "${{ inputs.use_baseline }}" ] && BASELINE_ARG="--baseline ${{ inputs.use_baseline }}"
          fi

          bandit \
            --severity-level "${{ inputs.severity }}" \
            --confidence-level "${{ inputs.confidence }}" \
            -f json -o bandit.json \
            -r $(tr '\n' ' ' < "${{ steps.files.outputs.files }}") \
            $BASELINE_ARG
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          set -e
        continue-on-error: true

      - name: Convert/Export SARIF (if requested)
        if: ${{ inputs.upload_sarif }}
        id: bandit_sarif
        shell: bash
        run: |
          set +e
          # Newer Bandit supports SARIF directly; try it first.
          if [ -n "${{ steps.files.outputs.files }}" ]; then
            bandit \
              --severity-level "${{ inputs.severity }}" \
              --confidence-level "${{ inputs.confidence }}" \
              -f sarif -o bandit.sarif \
              -r $(tr '\n' ' ' < "${{ steps.files.outputs.files }}") \
              ${ { inputs.use_baseline } && printf -- "--baseline %s" "${{ inputs.use_baseline }}" ; }
          else
            echo '{}' > bandit.sarif
          fi
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          set -e
        continue-on-error: true

      - name: pip-audit (dependency CVEs) â€” optional
        if: ${{ inputs.run_pip_audit }}
        id: pip_audit
        shell: bash
        run: |
          set +e
          # Try common requirements files; fall back to current env
          FILES=()
          for f in requirements.txt requirements-dev.txt requirements_dev.txt requirements/*.txt; do
            [ -f "$f" ] && FILES+=("$f")
          done
          if [ ${#FILES[@]} -gt 0 ]; then
            pip-audit -r "${FILES[@]}" -f json -o pip-audit.json
          else
            pip-audit -f json -o pip-audit.json
          fi
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          set -e
        continue-on-error: true

      - name: Summarize findings
        id: summary
        shell: bash
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f bandit.json ]; then
            SEV_H=$(jq '.metrics._totals["SEVERITY.HIGH"] // 0' bandit.json)
            SEV_M=$(jq '.metrics._totals["SEVERITY.MEDIUM"] // 0' bandit.json)
            SEV_L=$(jq '.metrics._totals["SEVERITY.LOW"] // 0' bandit.json)
            echo "### Bandit" >> $GITHUB_STEP_SUMMARY
            echo "- High: **$SEV_H**" >> $GITHUB_STEP_SUMMARY
            echo "- Medium: **$SEV_M**" >> $GITHUB_STEP_SUMMARY
            echo "- Low: **$SEV_L**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Bandit" >> $GITHUB_STEP_SUMMARY
            echo "- No report produced" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f pip-audit.json ]; then
            VULN_COUNT=$(jq '. | length' pip-audit.json)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### pip-audit" >> $GITHUB_STEP_SUMMARY
            echo "- Vulnerabilities: **$VULN_COUNT**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit.json
            bandit.sarif
            pip-audit.json
          if-no-files-found: ignore

      - name: Upload SARIF to GitHub code scanning
        if: ${{ inputs.upload_sarif }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      - name: Decide final status
        if: always()
        shell: bash
        run: |
          FAIL=0
          [ "${{ steps.bandit_json.outputs.exit_code }}" != "0" ] && FAIL=1
          if [ "${{ inputs.upload_sarif }}" = "true" ] && [ "${{ steps.bandit_sarif.outputs.exit_code }}" != "0" ]; then FAIL=1; fi
          if [ "${{ inputs.run_pip_audit }}" = "true" ] && [ "${{ steps.pip_audit.outputs.exit_code }}" != "0" ]; then FAIL=1; fi

          if [ "${{ inputs.fail_on_findings }}" = "true" ] && [ "$FAIL" -ne 0 ]; then
            echo "Failing due to findings or tool errors (per configuration)."
            exit 1
          else
            echo "Findings detected but not failing the job (per configuration)."
          fi
