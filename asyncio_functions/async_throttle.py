import asyncio
from typing import TypeVar
from collections.abc import AsyncGenerator

# Define a type variable for the items generated by the asynchronous generator
T = TypeVar("T")


async def async_throttle(
    generator: AsyncGenerator[T, None], delay: float
) -> AsyncGenerator[T, None]:
    """
    Throttle an asynchronous generator by adding a delay between items.

    Parameters
    ----------
    generator : AsyncGenerator[T, None]
        The asynchronous generator to throttle.
    delay : float
        The delay in seconds between each generated item.

    Returns
    -------
    AsyncGenerator[T, None]
        An asynchronous generator yielding items from ``generator`` delayed by
        the specified amount.

    Raises
    ------
    TypeError
        If ``delay`` is not a float.
    Exception
        Propagates any exception raised by the underlying ``generator``.

    Examples
    --------
    >>> async def my_generator():
    >>>     for i in range(5):
    >>>         yield i
    >>>
    >>> async for value in async_throttle(my_generator(), delay=1):
    >>>     print(value)
    0
    (1-second delay)
    1
    (1-second delay)
    2
    """
    if not isinstance(delay, (int, float)):
        raise TypeError("delay must be a float")

    # Iterate over the items in the generator
    async for item in generator:
        # Yield the current item
        yield item
        # Introduce a delay before yielding the next item
        await asyncio.sleep(delay)


__all__ = ["async_throttle"]
